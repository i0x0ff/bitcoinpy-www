<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>buidl on BitcoinPy</title><link>https://bitcoinpy.dev/docs/buidl/</link><description>Recent content in buidl on BitcoinPy</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://bitcoinpy.dev/docs/buidl/index.xml" rel="self" type="application/rss+xml"/><item><title>P2WPKH address</title><link>https://bitcoinpy.dev/docs/buidl/p2wpkh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/buidl/p2wpkh/</guid><description>P2WPKH is an abbreviation for Pay to Witness Public Key Hash. P2WPKH is the native Segwit version of a P2PKH.
P2WPKH has the same semantics as P2PKH, except that the signature is not placed at the same location as before. Segregated Witness (SegWit) moves the proof of ownership from the scriptSig part of the transaction to a new part called the witness of the input.
scriptPubKey: 0 &amp;lt;witnessPubKeyHash&amp;gt;
Generate address 1import hashlib 2 3from buidl.</description></item><item><title>P2WSH address (multisig)</title><link>https://bitcoinpy.dev/docs/buidl/p2wsh-multisig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/buidl/p2wsh-multisig/</guid><description>P2WSH is an abbreviation for Pay to Witness Script Hash. P2WSH is the native Segwit version of a P2SH.
&amp;quot;Script Hash addresses&amp;quot; are intended for multisig or other &amp;quot;smart contract&amp;quot; address. If all you wish to do is receive payment to an address (without multisig) it's better to use P2WPKH as it's cheaper to spend from those addresses. P2WSH has the same semantics as P2SH, except that the signature is not placed at the same location as before.</description></item><item><title>P2PKH address</title><link>https://bitcoinpy.dev/docs/buidl/p2pkh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/buidl/p2pkh/</guid><description>P2PKH is an abbreviation for Pay to Public Key Hash.
scriptPubKey: OP_DUP OP_HASH160 &amp;lt;pubKeyHash&amp;gt; OP_EQUALVERIFY OP_CHECKSIG
Generate address 1import hashlib 2 3from buidl.ecc import PrivateKey, Signature 4from buidl.bech32 import decode_bech32 5from buidl.helper import decode_base58, big_endian_to_int 6from buidl.script import P2PKHScriptPubKey, RedeemScript, WitnessScript, P2WPKHScriptPubKey 7from buidl.tx import Tx, TxIn, TxOut 8 9h = hashlib.sha256(b&amp;#39;correct horse battery staple&amp;#39;).digest() 10private_key = PrivateKey(secret=big_endian_to_int(h), network=&amp;#34;signet&amp;#34;) 11address = private_key.point.address(network=&amp;#34;signet&amp;#34;) 12print(&amp;#39;Address:&amp;#39;, str(address)) 13# outputs: Address: mrdwvWkma2D6n9mGsbtkazedQQuoksnqJV Spend from address Assuming the previously generated address has received funds, we can spend them.</description></item><item><title>P2SH address (multisig)</title><link>https://bitcoinpy.dev/docs/buidl/p2sh-multisig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/buidl/p2sh-multisig/</guid><description>P2SH is an abbreviation for Pay to Script Hash. It allows you to lock coins to the hash of a script, and you then provide that original script when you come unlock those coins.
&amp;quot;Script Hash addresses&amp;quot; are intended for multisig or other &amp;quot;smart contract&amp;quot; address. If all you wish to do is receive payment to an address (without multisig) it's better to use P2WPKH as it's cheaper to spend from those addresses.</description></item><item><title>P2TR address</title><link>https://bitcoinpy.dev/docs/buidl/p2tr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/buidl/p2tr/</guid><description>todo</description></item></channel></rss>