<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bitcoin resource for Python developers on BitcoinPy</title><link>https://bitcoinpy.dev/</link><description>Recent content in Bitcoin resource for Python developers on BitcoinPy</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://bitcoinpy.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>P2WPKH address</title><link>https://bitcoinpy.dev/docs/buidl/p2wpkh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/buidl/p2wpkh/</guid><description>Generate address 1import hashlib 2 3from buidl.ecc import PrivateKey, Signature 4from buidl.helper import decode_base58, big_endian_to_int 5from buidl.bech32 import decode_bech32, encode_bech32_checksum 6from buidl.script import P2PKHScriptPubKey, RedeemScript, WitnessScript, P2WPKHScriptPubKey 7from buidl.tx import Tx, TxIn, TxOut 8 9h = hashlib.sha256(b&amp;#39;correct horse battery staple&amp;#39;).digest() 10private_key = PrivateKey(secret=big_endian_to_int(h), network=&amp;#34;signet&amp;#34;) 11address = private_key.point.bech32_address(&amp;#34;signet&amp;#34;) 12print(&amp;#39;Address:&amp;#39;, str(address)) 13# outputs: Address: tb1q08alc0e5ua69scxhvyma568nvguqccrvl7rkgx Spend from address Assuming the previously generated address has received funds, we can spend them. In order to spend them, we'll need information about the transaction id (txid) and a vector of an output (vout).</description></item><item><title>P2WPKH address</title><link>https://bitcoinpy.dev/docs/python-bitcoinlib/p2wpkh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/python-bitcoinlib/p2wpkh/</guid><description>Generate address 1import hashlib 2 3from bitcoin import SelectParams 4from bitcoin.core import b2x, b2lx, lx, COIN, COutPoint, CTxOut, CTxIn, CTxInWitness, CTxWitness, CScriptWitness, CMutableTransaction, Hash160 5from bitcoin.core.script import CScript, OP_0, OP_CHECKSIG, SignatureHash, SIGHASH_ALL, SIGVERSION_WITNESS_V0 6from bitcoin.wallet import CBitcoinSecret, P2WPKHBitcoinAddress, CBitcoinAddress 7from bitcoin.rpc import Proxy 8 9SelectParams(&amp;#34;regtest&amp;#34;) 10 11 12# Create the (in)famous correct brainwallet secret key. 13h = hashlib.sha256(b&amp;#39;correct horse battery staple&amp;#39;).digest() 14seckey = CBitcoinSecret.from_secret_bytes(h) 15 16public_key = seckey.pub 17script_pubkey = CScript([OP_0, Hash160(public_key)]) 18address = P2WPKHBitcoinAddress.</description></item><item><title>P2WSH address (multisig)</title><link>https://bitcoinpy.dev/docs/buidl/p2wsh-multisig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/buidl/p2wsh-multisig/</guid><description>The example for 1-of-1 should only serve as an example. We don't recommend using it in the real world because it is not its intention. Instead of 1-of-1 use P2PKH! Generate address (1-of-1) 1import hashlib 2 3from buidl.ecc import PrivateKey, Signature 4from buidl.helper import decode_base58, big_endian_to_int 5from buidl.bech32 import decode_bech32, encode_bech32_checksum 6from buidl.script import P2PKHScriptPubKey, RedeemScript, WitnessScript, P2WPKHScriptPubKey 7from buidl.tx import Tx, TxIn, TxOut 8from buidl.witness import Witness 9 10h = hashlib.</description></item><item><title>P2WSH address (multisig)</title><link>https://bitcoinpy.dev/docs/python-bitcoinlib/p2wsh-multisig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/python-bitcoinlib/p2wsh-multisig/</guid><description>The example for 1-of-1 should only serve as an example. We don't recommend using it in the real world because it is not its intention. Instead of 1-of-1 use P2PKH! Generate address (1-of-1) 1import hashlib 2 3from bitcoin import SelectParams 4from bitcoin.core import b2x, lx, COIN, COutPoint, CMutableTxOut, CMutableTxIn, CMutableTransaction, CTxInWitness, CTxWitness 5from bitcoin.core.script import CScript, CScriptWitness, OP_0, OP_CHECKSIG, SignatureHash, SIGHASH_ALL, SIGVERSION_WITNESS_V0 6from bitcoin.wallet import CBitcoinSecret, CBitcoinAddress, P2WSHBitcoinAddress 7 8# We&amp;#39;ll be using regtest throughout this guide 9SelectParams(&amp;#34;regtest&amp;#34;) 10 11# Create the (in)famous correct brainwallet secret key.</description></item><item><title>P2PKH address</title><link>https://bitcoinpy.dev/docs/buidl/p2pkh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/buidl/p2pkh/</guid><description>Generate address 1import hashlib 2 3from buidl.ecc import PrivateKey, Signature 4from buidl.bech32 import decode_bech32 5from buidl.helper import decode_base58, big_endian_to_int 6from buidl.script import P2PKHScriptPubKey, RedeemScript, WitnessScript, P2WPKHScriptPubKey 7from buidl.tx import Tx, TxIn, TxOut 8 9h = hashlib.sha256(b&amp;#39;correct horse battery staple&amp;#39;).digest() 10private_key = PrivateKey(secret=big_endian_to_int(h), network=&amp;#34;signet&amp;#34;) 11address = private_key.point.address(network=&amp;#34;signet&amp;#34;) 12print(&amp;#39;Address:&amp;#39;, str(address)) 13# outputs: Address: mrdwvWkma2D6n9mGsbtkazedQQuoksnqJV Spend from address Assuming the previously generated address has received funds, we can spend them. In order to spend them, we'll need information about the transaction id (txid) and a vector of an output (vout).</description></item><item><title>P2PKH address</title><link>https://bitcoinpy.dev/docs/python-bitcoinlib/p2pkh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/python-bitcoinlib/p2pkh/</guid><description>Generate address 1import hashlib 2 3from bitcoin import SelectParams 4from bitcoin.core import b2x, lx, COIN, COutPoint, CMutableTxOut, CMutableTxIn, CMutableTransaction, Hash160 5from bitcoin.core.script import CScript, OP_DUP, OP_HASH160, OP_EQUALVERIFY, OP_CHECKSIG, SignatureHash, SIGHASH_ALL 6from bitcoin.core.scripteval import VerifyScript, SCRIPT_VERIFY_P2SH 7from bitcoin.wallet import CBitcoinAddress, CBitcoinSecret, P2PKHBitcoinAddress 8 9SelectParams(&amp;#39;regtest&amp;#39;) 10 11# Create the (in)famous correct brainwallet secret key. 12h = hashlib.sha256(b&amp;#39;correct horse battery staple&amp;#39;).digest() 13seckey = CBitcoinSecret.from_secret_bytes(h) 14 15# Create a redeemScript used to unlock bitcoins 16redeem_script = CScript([OP_DUP, OP_HASH160, Hash160(seckey.</description></item><item><title>HTLC</title><link>https://bitcoinpy.dev/docs/python-bitcoinlib/htlc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/python-bitcoinlib/htlc/</guid><description>Below is a sample Hash Time Locked Contract (HTLC). It's a conditional payment that can be spent in two ways. Either sender (the person who locked the funds in) can unlock them after some number of blocks have been mined or the receiver (the person whom the funds are intended for) when he gets reveald the secret code that only sender knows.
Note that each condition also runs a OP_EQUALVERIFY check on a public key to enforce that:</description></item><item><title>P2SH address (multisig)</title><link>https://bitcoinpy.dev/docs/buidl/p2sh-multisig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/buidl/p2sh-multisig/</guid><description>The example for 1-of-1 should only serve as an example. We don't recommend using it in the real world because it is not its intention. Instead of 1-of-1 use P2PKH! Generate address (1-of-1) 1import hashlib 2 3from buidl.ecc import PrivateKey, Signature 4from buidl.bech32 import decode_bech32 5from buidl.helper import decode_base58, big_endian_to_int, SIGHASH_ALL, int_to_byte 6from buidl.script import P2PKHScriptPubKey, RedeemScript, Script, P2WPKHScriptPubKey 7from buidl.tx import Tx, TxIn, TxOut 8 9h = hashlib.</description></item><item><title>P2SH address (multisig)</title><link>https://bitcoinpy.dev/docs/python-bitcoinlib/p2sh-multisig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/python-bitcoinlib/p2sh-multisig/</guid><description>The example for 1-of-1 should only serve as an example. We don't recommend using it in the real world because it is not its intention. Instead of 1-of-1 use P2PKH! Generate address (1-of-1) 1import hashlib 2 3from bitcoin import SelectParams 4from bitcoin.core import b2x, lx, COIN, COutPoint, CMutableTxOut, CMutableTxIn, CMutableTransaction, Hash160 5from bitcoin.core.script import CScript, OP_DUP, OP_HASH160, OP_EQUALVERIFY, OP_CHECKSIG, SignatureHash, SIGHASH_ALL 6from bitcoin.core.scripteval import VerifyScript, SCRIPT_VERIFY_P2SH 7from bitcoin.wallet import CBitcoinAddress, CBitcoinSecret 8 9SelectParams(&amp;#39;regtest&amp;#39;) 10 11# Create the (in)famous correct brainwallet secret key.</description></item><item><title>P2TR address</title><link>https://bitcoinpy.dev/docs/buidl/p2tr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/buidl/p2tr/</guid><description>todo</description></item><item><title>P2TR address</title><link>https://bitcoinpy.dev/docs/python-bitcoinlib/p2tr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/docs/python-bitcoinlib/p2tr/</guid><description>python-bitcoinlib currently does not support Taproot. Github Issue is open here.</description></item><item><title>Search</title><link>https://bitcoinpy.dev/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bitcoinpy.dev/search/</guid><description/></item></channel></rss>